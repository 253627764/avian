buildscript {
  repositories {
    jcenter()
  }

  dependencies {
    classpath 'org.jfrog.buildinfo:build-info-extractor-gradle:2.2.4'
  }
}

apply plugin: 'native-component'
apply plugin: 'ivy-publish'
apply plugin: 'java'
apply plugin: 'artifactory-publish'

public String adjustArch(String arch) {
  switch(arch) {
    case ~/.*64.*/: return 'x86_64'
    default:        return 'i386'
  }
}

public String adjustPlatform(String platform) {
  switch(platform.replaceAll(' ', '').toLowerCase()) {
    case ~/.*linux.*/:  return 'linux'
    case ~/.*darwin.*/: return 'macosx'
    case ~/.*osx.*/:    return 'macosx'
    case ~/.*win.*/:    return 'windows'
    default:            return platform
  }
}

ext {
  currentPlatform = adjustPlatform(System.properties['os.name'])
  currentArch = adjustArch(System.properties['os.arch'])
  currentPlatformArch = "${currentPlatform}-${currentArch}"

  platform = project.hasProperty('platform') ? platform : currentPlatform
  arch = project.hasProperty('arch') ? arch : currentArch
  platformArch = "${platform}-${arch}"
}

model {
  platforms {
    create(platformArch) {
      operatingSystem "${platform}"
      architecture "${arch}"
    }
    if(platformArch != currentPlatformArch) {
      create(currentPlatformArch) {
        operatingSystem "${currentPlatform}"
        architecture "${currentArch}"
      }
    }
  }

  tasks {
    platforms.each { platform ->
      task "build${platform.name}"(type: Exec) {
        executable "make"
        args "platform=${platform.operatingSystem.name}",
             "arch=${platform.architecture.name}"
        environment JAVA_HOME: "/usr/local/java"
      }

      assemble {
        dependsOn "build${platform.name}"
      }
    }
  }
}

tasks.withType(JavaCompile) {
  sourceCompatibility = "1.6"
  targetCompatibility = "1.6"

  options.with {
    encoding = "UTF-8"
    bootClasspath = sourceSets.main.output.classesDir
  }
}

sourceSets {
  main {
    java {
      srcDir 'classpath'
    }
  }
}

javadoc {
  title = "Avian v${version} Class Library API"
}

task javadocJar(type: Jar) {
  dependsOn javadoc
  classifier = 'javadoc'
  from {
    javadoc.destinationDir
  }
}

jar {
  baseName "classpath-avian"
}

task install {
  dependsOn assemble, publish
}

publishing {
  repositories {
    ivy {
      url "${System.env.HOME}/.ivy2/local"
      layout 'maven'
    }
  }

  publications {

    ivy(IvyPublication) {
      from components.java

      artifact(javadocJar)
    }

    create("tools-${currentPlatformArch}", IvyPublication) {
      module "avian-tools-${currentPlatformArch}"

      def publishBinSuffix = currentPlatform == "windows" ? "exe" : "bin"
      def binSuffix = currentPlatform == "windows" ? ".exe" : ""
      artifact("${buildDir}/${currentPlatform}-${currentArch}/binaryToObject/binaryToObject") {
        name "binaryToObject"
        type publishBinSuffix
        extension binSuffix
      }
    }

    platforms.each { platform ->
      def binSuffix=""
      def publishBinSuffix="bin"

      create(platform.name, IvyPublication) {
        def nativeBuildDir = "${buildDir}/${platform.operatingSystem.name}-${platform.architecture.name}"

        if(platform.operatingSystem.name == "windows") {
          publishBinSuffix = "exe"
          binSuffix = ".${publishBinSuffix}"
        }

        module "${project.name}-${platform.name}"

        artifact("${nativeBuildDir}/avian${binSuffix}") {
          name "avian"
          type publishBinSuffix
          extension publishBinSuffix
        }

        artifact("${nativeBuildDir}/libavian.a") {
          name "libavian"
          type "a"
          extension "a"
        }
      }
    }
  }
}

artifactoryPublish {
  dependsOn assemble
}

artifactory {
  contextUrl = "http://oss.jfrog.org"

  resolve {
    repository {
      repoKey = 'libs-releases'
    }
  }

  publish {
    repository {
      repoKey = 'oss-snapshot-local'
      username = System.env.BINTRAY_USER
      password = System.env.BINTRAY_API_KEY
      ivy {
        ivyLayout = "[organisation]/[module]/[revision]/ivy-[revision].xml"
      }
    }

    defaults {
      platforms.each {
        publications it.name
      }
    }
  }
}

task wrapper(type: Wrapper) {
  gradleVersion = '2.0'
}